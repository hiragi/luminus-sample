;; Analyzed by ClojureScript 0.0-3178
{:use-macros nil, :excludes #{}, :name ajax.core, :imports nil, :requires {uri goog.Uri, t cognitect.transit, xhr goog.net.XhrIo, goog.net.XhrManager goog.net.XhrManager, goog.net.XhrIo goog.net.XhrIo, goog.json goog.json, goog.Uri.QueryData goog.Uri.QueryData, goog.Uri goog.Uri, query-data goog.Uri.QueryData, cognitect.transit cognitect.transit, goog.net.EventType goog.net.EventType, events goog.events, goog.structs goog.structs, goog-json goog.json, structs goog.structs, goog.json.Serializer goog.json.Serializer, xhrm goog.net.XhrManager, str clojure.string, clojure.string clojure.string, cljs.reader cljs.reader, goog.events goog.events, reader cljs.reader, goog.net.ErrorCode goog.net.ErrorCode}, :uses nil, :defs {edn-request-format {:protocol-inline nil, :meta {:file nil, :arglists (quote ([])), :end-column 25, :end-line 128, :column 7, :line 128}, :name ajax.core/edn-request-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, -status {:protocol-inline nil, :meta {:file nil, :arglists (quote ([this])), :doc "Returns the HTTP Status of the response as an integer.", :protocol ajax.core/AjaxResponse, :end-column 11, :end-line 36, :column 4, :line 36}, :protocol ajax.core/AjaxResponse, :name ajax.core/-status, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the HTTP Status of the response as an integer.", :test true}, PUT {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists [[uri & opts]], :arglists-meta (nil)}, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :end-column 16, :end-line 443, :column 13, :line 443}, :name ajax.core/PUT, :variadic true, :file "resources/public/js/out/ajax/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists [[uri & opts]], :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 443, :end-line 443, :max-fixed-arity 1, :fn-var true, :arglists [[uri & opts]], :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :test true}, detect-content-type {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([content-type opts format-entry] [content-type opts] [content-type]), :arglists ([content-type opts format-entry] [content-type opts] [content-type]), :arglists-meta (nil nil nil)}, :arglists (quote ([content-type opts format-entry] [content-type opts] [content-type])), :end-column 36, :end-line 230, :column 17, :line 230}, :name ajax.core/detect-content-type, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 36, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([content-type opts format-entry] [content-type opts] [content-type]), :arglists ([content-type opts format-entry] [content-type opts] [content-type]), :arglists-meta (nil nil nil)}, :method-params ([content-type opts format-entry] [content-type opts] [content-type]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 3, :fn-var true, :arglists ([content-type opts format-entry] [content-type opts] [content-type]), :test true}, POST {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists [[uri & opts]], :arglists-meta (nil)}, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :end-column 17, :end-line 442, :column 13, :line 442}, :name ajax.core/POST, :variadic true, :file "resources/public/js/out/ajax/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists [[uri & opts]], :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 442, :end-line 442, :max-fixed-arity 1, :fn-var true, :arglists [[uri & opts]], :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :test true}, keyword-response-format-2 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([format format-params])), :end-column 32, :end-line 387, :column 7, :line 387}, :name ajax.core/keyword-response-format-2, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 32, :method-params ([format format-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 387, :end-line 387, :max-fixed-arity 2, :fn-var true, :arglists (quote ([format format-params])), :test true}, AjaxImpl {:meta {:file nil, :protocol-info {:methods {-js-ajax-request [[this uri method body headers handler opts]]}}, :protocol-symbol true, :doc "An abstraction for a javascript class that implements\n   Ajax calls.", :end-column 22, :end-line 19, :column 14, :line 19}, :protocol-symbol true, :name ajax.core/AjaxImpl, :file "resources/public/js/out/ajax/core.cljs", :end-column 22, :column 1, :line 19, :protocol-info {:methods {-js-ajax-request [[this uri method body headers handler opts]]}}, :info nil, :end-line 19, :impls #{js/XMLHttpRequest goog/net.XhrManager goog/net.XhrIo}, :doc "An abstraction for a javascript class that implements\n   Ajax calls.", :test true}, accept-header {:protocol-inline nil, :meta {:file nil, :arglists (quote ([{:keys [response-format], :as opts}])), :end-column 20, :end-line 248, :column 7, :line 248}, :name ajax.core/accept-header, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 20, :method-params ([p__31841]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [response-format], :as opts}])), :test true}, transit-request-format {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [type writer], :as opts}]), :arglists ([] [{:keys [type writer], :as opts}]), :arglists-meta (nil nil)}, :arglists (quote ([] [{:keys [type writer], :as opts}])), :end-column 29, :end-line 138, :column 7, :line 138}, :name ajax.core/transit-request-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [type writer], :as opts}]), :arglists ([] [{:keys [type writer], :as opts}]), :arglists-meta (nil nil)}, :method-params ([] [{:keys [type writer], :as opts}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists ([] [{:keys [type writer], :as opts}]), :test true}, transit-read {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([reader raw xhrio] [reader raw] [reader]), :arglists ([reader raw xhrio] [reader raw] [reader]), :arglists-meta (nil nil nil)}, :arglists (quote ([reader raw xhrio] [reader raw] [reader])), :end-column 29, :end-line 145, :column 17, :line 145}, :name ajax.core/transit-read, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([reader raw xhrio] [reader raw] [reader]), :arglists ([reader raw xhrio] [reader raw] [reader]), :arglists-meta (nil nil nil)}, :method-params ([reader raw xhrio] [reader raw] [reader]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 3, :fn-var true, :arglists ([reader raw xhrio] [reader raw] [reader]), :test true}, json-request-format {:protocol-inline nil, :meta {:file nil, :arglists (quote ([])), :end-column 26, :end-line 177, :column 7, :line 177}, :name ajax.core/json-request-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, success? {:protocol-inline nil, :meta {:file nil, :arglists (quote ([status])), :end-column 15, :end-line 114, :column 7, :line 114}, :name ajax.core/success?, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 15, :method-params ([status]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([status])), :test true}, raw-response-format {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :arglists (quote ([] [opts])), :end-column 26, :end-line 170, :column 7, :line 170}, :name ajax.core/raw-response-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts]), :test true}, get-request-format {:protocol-inline nil, :meta {:file nil, :arglists (quote ([format])), :end-column 25, :end-line 324, :column 7, :line 324}, :name ajax.core/get-request-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 25, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 324, :end-line 324, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format])), :test true}, process-inputs {:protocol-inline nil, :meta {:file nil, :arglists (quote ([{:keys [uri method format params headers]} {:keys [content-type]}])), :end-column 21, :end-line 335, :column 7, :line 335}, :name ajax.core/process-inputs, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 21, :method-params ([p__31864 p__31865]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [uri method format params headers]} {:keys [content-type]}])), :test true}, get-default-format {:protocol-inline nil, :meta {:file nil, :arglists (quote ([xhrio {:keys [response-format], :as opts}])), :end-column 25, :end-line 235, :column 7, :line 235}, :name ajax.core/get-default-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 25, :method-params ([xhrio p__31835]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 235, :end-line 235, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xhrio {:keys [response-format], :as opts}])), :test true}, -abort {:protocol-inline nil, :meta {:file nil, :arglists (quote ([this])), :doc "Aborts a running ajax request, if possible.", :protocol ajax.core/AjaxRequest, :end-column 10, :end-line 28, :column 4, :line 28}, :protocol ajax.core/AjaxRequest, :name ajax.core/-abort, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Aborts a running ajax request, if possible.", :test true}, detect-response-format-read {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([opts xhrio] [opts]), :arglists ([opts xhrio] [opts]), :arglists-meta (nil nil)}, :arglists (quote ([opts xhrio] [opts])), :end-column 44, :end-line 244, :column 17, :line 244}, :name ajax.core/detect-response-format-read, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 44, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([opts xhrio] [opts]), :arglists ([opts xhrio] [opts]), :arglists-meta (nil nil)}, :method-params ([opts xhrio] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 2, :fn-var true, :arglists ([opts xhrio] [opts]), :test true}, default-formats {:file "resources/public/js/out/ajax/core.cljs", :meta {:file nil, :end-column 21, :end-line 209, :column 6, :line 209}, :line 209, :column 1, :end-line 209, :end-column 21, :test true, :name ajax.core/default-formats}, interpret-response {:protocol-inline nil, :meta {:file nil, :arglists (quote ([{:keys [read], :as format} xhrio])), :end-column 25, :end-line 297, :column 7, :line 297}, :name ajax.core/interpret-response, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 25, :method-params ([p__31857 xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 297, :end-line 297, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [read], :as format} xhrio])), :test true}, -status-text {:protocol-inline nil, :meta {:file nil, :arglists (quote ([this])), :doc "Returns the HTTP Status Text of the response as a string.", :protocol ajax.core/AjaxResponse, :end-column 16, :end-line 38, :column 4, :line 38}, :protocol ajax.core/AjaxResponse, :name ajax.core/-status-text, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the HTTP Status Text of the response as a string.", :test true}, get-response-format {:protocol-inline nil, :meta {:file nil, :arglists (quote ([{:keys [response-format], :as opts}])), :end-column 26, :end-line 263, :column 7, :line 263}, :name ajax.core/get-response-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 26, :method-params ([p__31847]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 263, :end-line 263, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [response-format], :as opts}])), :test true}, easy-ajax-request {:protocol-inline nil, :meta {:file nil, :arglists (quote ([uri method opts])), :end-column 24, :end-line 433, :column 7, :line 433}, :name ajax.core/easy-ajax-request, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 24, :method-params ([uri method opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 433, :end-line 433, :max-fixed-arity 3, :fn-var true, :arglists (quote ([uri method opts])), :test true}, -get-response-header {:protocol-inline nil, :meta {:file nil, :arglists (quote ([this header])), :doc "Gets the specified response header (specified by a string) as a string.", :protocol ajax.core/AjaxResponse, :end-column 24, :end-line 42, :column 4, :line 42}, :protocol ajax.core/AjaxResponse, :name ajax.core/-get-response-header, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 24, :method-params ([this header]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this header])), :doc "Gets the specified response header (specified by a string) as a string.", :test true}, AjaxResponse {:meta {:file nil, :protocol-info {:methods {-status [[this]], -status-text [[this]], -body [[this]], -get-response-header [[this header]], -was-aborted [[this]]}}, :protocol-symbol true, :doc "An abstraction for an ajax response.", :end-column 26, :end-line 34, :column 14, :line 34}, :protocol-symbol true, :name ajax.core/AjaxResponse, :file "resources/public/js/out/ajax/core.cljs", :end-column 26, :column 1, :line 34, :protocol-info {:methods {-status [[this]], -status-text [[this]], -body [[this]], -get-response-header [[this header]], -was-aborted [[this]]}}, :info nil, :end-line 34, :impls #{js/XMLHttpRequest goog/net.XhrIo}, :doc "An abstraction for an ajax response.", :test true}, exception-response {:protocol-inline nil, :meta {:file nil, :arglists (quote ([e status {:keys [description]} xhrio])), :end-column 25, :end-line 272, :column 7, :line 272}, :name ajax.core/exception-response, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 25, :method-params ([e status p__31850 xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 4, :fn-var true, :arglists (quote ([e status {:keys [description]} xhrio])), :test true}, submittable? {:protocol-inline nil, :meta {:file nil, :arglists (quote ([params])), :end-column 19, :end-line 50, :column 7, :line 50}, :name ajax.core/submittable?, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 19, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params])), :test true}, uri-with-params {:protocol-inline nil, :meta {:file nil, :arglists (quote ([uri params])), :end-column 22, :end-line 319, :column 7, :line 319}, :name ajax.core/uri-with-params, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 22, :method-params ([uri params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 2, :fn-var true, :arglists (quote ([uri params])), :test true}, transform-handler {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :arglists ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :arglists-meta (nil nil)}, :arglists (quote ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}])), :end-column 34, :end-line 410, :column 17, :line 410}, :name ajax.core/transform-handler, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 34, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :arglists ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :arglists-meta (nil nil)}, :method-params ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 410, :end-line 410, :max-fixed-arity 2, :fn-var true, :arglists ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :test true}, no-format {:protocol-inline nil, :meta {:file nil, :arglists (quote ([xhrio])), :end-column 16, :end-line 316, :column 7, :line 316}, :name ajax.core/no-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 16, :method-params ([xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 316, :end-line 316, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xhrio])), :test true}, transform-opts {:protocol-inline nil, :meta {:file nil, :arglists (quote ([{:keys [method format response-format params], :as opts}])), :end-column 21, :end-line 417, :column 7, :line 417}, :name ajax.core/transform-opts, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 21, :method-params ([p__31905]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 417, :end-line 417, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [method format response-format params], :as opts}])), :test true}, AjaxRequest {:meta {:file nil, :protocol-info {:methods {-abort [[this]]}}, :protocol-symbol true, :doc "An abstraction for a running ajax request.", :end-column 25, :end-line 26, :column 14, :line 26}, :protocol-symbol true, :name ajax.core/AjaxRequest, :file "resources/public/js/out/ajax/core.cljs", :end-column 25, :column 1, :line 26, :protocol-info {:methods {-abort [[this]]}}, :info nil, :end-line 26, :impls #{js/XMLHttpRequest goog/net.XhrIo}, :doc "An abstraction for a running ajax request.", :test true}, js-handler {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([response-format handler xhrio] [response-format handler] [response-format]), :arglists ([response-format handler xhrio] [response-format handler] [response-format]), :arglists-meta (nil nil nil)}, :arglists (quote ([response-format handler xhrio] [response-format handler] [response-format])), :end-column 27, :end-line 352, :column 17, :line 352}, :name ajax.core/js-handler, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([response-format handler xhrio] [response-format handler] [response-format]), :arglists ([response-format handler xhrio] [response-format handler] [response-format]), :arglists-meta (nil nil nil)}, :method-params ([response-format handler xhrio] [response-format handler] [response-format]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 352, :end-line 352, :max-fixed-arity 3, :fn-var true, :arglists ([response-format handler xhrio] [response-format handler] [response-format]), :test true}, DELETE {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists [[uri & opts]], :arglists-meta (nil)}, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :end-column 19, :end-line 444, :column 13, :line 444}, :name ajax.core/DELETE, :variadic true, :file "resources/public/js/out/ajax/core.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists [[uri & opts]], :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 444, :end-line 444, :max-fixed-arity 1, :fn-var true, :arglists [[uri & opts]], :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :test true}, params-to-str {:protocol-inline nil, :meta {:file nil, :arglists (quote ([params])), :end-column 20, :end-line 158, :column 7, :line 158}, :name ajax.core/params-to-str, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 20, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params])), :test true}, transit-content-type {:file "resources/public/js/out/ajax/core.cljs", :meta {:file nil, :end-column 26, :end-line 132, :column 6, :line 132}, :line 132, :column 1, :end-line 132, :end-column 26, :test true, :name ajax.core/transit-content-type}, -was-aborted {:protocol-inline nil, :meta {:file nil, :arglists (quote ([this])), :doc "Was the response aborted.", :protocol ajax.core/AjaxResponse, :end-column 16, :end-line 44, :column 4, :line 44}, :protocol ajax.core/AjaxResponse, :name ajax.core/-was-aborted, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Was the response aborted.", :test true}, json-response-format {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [prefix keywords? raw]}]), :arglists ([] [{:keys [prefix keywords? raw]}]), :arglists-meta (nil nil)}, :arglists (quote ([] [{:keys [prefix keywords? raw]}])), :doc "Returns a JSON response format.  Options include\n   :keywords? Returns the keys as keywords\n   :prefix A prefix that needs to be stripped off.  This is to\n   combat JSON hijacking.  If you're using JSON with GET request,\n   you should think about using this.\n   http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses\n   http://haacked.com/archive/2009/06/24/json-hijacking.aspx", :end-column 27, :end-line 191, :column 7, :line 191}, :name ajax.core/json-response-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [prefix keywords? raw]}]), :arglists ([] [{:keys [prefix keywords? raw]}]), :arglists-meta (nil nil)}, :method-params ([] [{:keys [prefix keywords? raw]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists ([] [{:keys [prefix keywords? raw]}]), :doc "Returns a JSON response format.  Options include\n   :keywords? Returns the keys as keywords\n   :prefix A prefix that needs to be stripped off.  This is to\n   combat JSON hijacking.  If you're using JSON with GET request,\n   you should think about using this.\n   http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses\n   http://haacked.com/archive/2009/06/24/json-hijacking.aspx", :test true}, transit-write {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([writer params] [writer]), :arglists ([writer params] [writer]), :arglists-meta (nil nil)}, :arglists (quote ([writer params] [writer])), :end-column 30, :end-line 134, :column 17, :line 134}, :name ajax.core/transit-write, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 30, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([writer params] [writer]), :arglists ([writer params] [writer]), :arglists-meta (nil nil)}, :method-params ([writer params] [writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 2, :fn-var true, :arglists ([writer params] [writer]), :test true}, get-format {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([opts format-entry] [opts]), :arglists ([opts format-entry] [opts]), :arglists-meta (nil nil)}, :arglists (quote ([opts format-entry] [opts])), :end-column 27, :end-line 217, :column 17, :line 217}, :name ajax.core/get-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([opts format-entry] [opts]), :arglists ([opts format-entry] [opts]), :arglists-meta (nil nil)}, :method-params ([opts format-entry] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 2, :fn-var true, :arglists ([opts format-entry] [opts]), :test true}, abort {:protocol-inline nil, :meta {:file nil, :arglists (quote ([this])), :end-column 12, :end-line 112, :column 7, :line 112}, :name ajax.core/abort, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, ajax-request {:protocol-inline nil, :meta {:file nil, :arglists (quote ([{:keys [method api], :as opts}])), :end-column 19, :end-line 362, :column 7, :line 362}, :name ajax.core/ajax-request, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 19, :method-params ([p__31878]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 362, :end-line 362, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [method api], :as opts}])), :test true}, read-edn {:protocol-inline nil, :meta {:file nil, :arglists (quote ([xhrio])), :end-column 15, :end-line 119, :column 7, :line 119}, :name ajax.core/read-edn, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 15, :method-params ([xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xhrio])), :test true}, normalize-method {:protocol-inline nil, :meta {:file nil, :arglists (quote ([method])), :end-column 23, :end-line 330, :column 7, :line 330}, :name ajax.core/normalize-method, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 23, :method-params ([method]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 330, :end-line 330, :max-fixed-arity 1, :fn-var true, :arglists (quote ([method])), :test true}, -body {:protocol-inline nil, :meta {:file nil, :arglists (quote ([this])), :doc "Returns the response body as a string.", :protocol ajax.core/AjaxResponse, :end-column 9, :end-line 40, :column 4, :line 40}, :protocol ajax.core/AjaxResponse, :name ajax.core/-body, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the response body as a string.", :test true}, url-request-format {:protocol-inline nil, :meta {:file nil, :arglists (quote ([])), :end-column 25, :end-line 166, :column 7, :line 166}, :name ajax.core/url-request-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, keyword-response-format {:protocol-inline nil, :meta {:file nil, :arglists (quote ([format format-params])), :end-column 30, :end-line 403, :column 7, :line 403}, :name ajax.core/keyword-response-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 30, :method-params ([format format-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 403, :end-line 403, :max-fixed-arity 2, :fn-var true, :arglists (quote ([format format-params])), :test true}, write-json {:protocol-inline nil, :meta {:file nil, :arglists (quote ([data])), :end-column 17, :end-line 174, :column 7, :line 174}, :name ajax.core/write-json, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 17, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :test true}, fail {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(status status-text failure params)], :arglists [[status status-text failure & params]], :arglists-meta (nil)}, :arglists (quote ([status status-text failure & params])), :end-column 11, :end-line 289, :column 7, :line 289}, :name ajax.core/fail, :variadic true, :file "resources/public/js/out/ajax/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(status status-text failure params)], :arglists [[status status-text failure & params]], :arglists-meta (nil)}, :method-params [(status status-text failure params)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 289, :end-line 289, :max-fixed-arity 3, :fn-var true, :arglists [[status status-text failure & params]], :test true}, edn-response-format {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :arglists (quote ([] [opts])), :end-column 26, :end-line 122, :column 7, :line 122}, :name ajax.core/edn-response-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts]), :test true}, GET {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists [[uri & opts]], :arglists-meta (nil)}, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :end-column 16, :end-line 440, :column 13, :line 440}, :name ajax.core/GET, :variadic true, :file "resources/public/js/out/ajax/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists [[uri & opts]], :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 440, :end-line 440, :max-fixed-arity 1, :fn-var true, :arglists [[uri & opts]], :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :test true}, HEAD {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists [[uri & opts]], :arglists-meta (nil)}, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :end-column 17, :end-line 441, :column 13, :line 441}, :name ajax.core/HEAD, :variadic true, :file "resources/public/js/out/ajax/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists [[uri & opts]], :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 441, :end-line 441, :max-fixed-arity 1, :fn-var true, :arglists [[uri & opts]], :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :test true}, accept-entry {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([opts format-entry] [opts]), :arglists ([opts format-entry] [opts]), :arglists-meta (nil nil)}, :arglists (quote ([opts format-entry] [opts])), :end-column 29, :end-line 224, :column 17, :line 224}, :name ajax.core/accept-entry, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([opts format-entry] [opts]), :arglists ([opts format-entry] [opts]), :arglists-meta (nil nil)}, :method-params ([opts format-entry] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 2, :fn-var true, :arglists ([opts format-entry] [opts]), :test true}, DirectlySubmittable {:meta {:file nil, :protocol-info {:methods {}}, :protocol-symbol true, :doc "A marker interface for types that can be directly sent to XhrIo.", :end-column 33, :end-line 31, :column 14, :line 31}, :protocol-symbol true, :name ajax.core/DirectlySubmittable, :file "resources/public/js/out/ajax/core.cljs", :end-column 33, :column 1, :line 31, :protocol-info {:methods {}}, :info nil, :end-line 31, :impls #{js/Blob js/Document js/ArrayBufferView js/FormData}, :doc "A marker interface for types that can be directly sent to XhrIo.", :test true}, TRACE {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists [[uri & opts]], :arglists-meta (nil)}, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :end-column 18, :end-line 446, :column 13, :line 446}, :name ajax.core/TRACE, :variadic true, :file "resources/public/js/out/ajax/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists [[uri & opts]], :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 446, :end-line 446, :max-fixed-arity 1, :fn-var true, :arglists [[uri & opts]], :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :test true}, transit-response-format {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [type reader raw], :as opts}]), :arglists ([] [{:keys [type reader raw], :as opts}]), :arglists-meta (nil nil)}, :arglists (quote ([] [{:keys [type reader raw], :as opts}])), :end-column 30, :end-line 150, :column 7, :line 150}, :name ajax.core/transit-response-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 30, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [type reader raw], :as opts}]), :arglists ([] [{:keys [type reader raw], :as opts}]), :arglists-meta (nil nil)}, :method-params ([] [{:keys [type reader raw], :as opts}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 1, :fn-var true, :arglists ([] [{:keys [type reader raw], :as opts}]), :test true}, base-handler {:protocol-inline nil, :meta {:file nil, :arglists (quote ([response-format {:keys [handler]}])), :end-column 19, :end-line 357, :column 7, :line 357}, :name ajax.core/base-handler, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 19, :method-params ([response-format p__31875]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 357, :end-line 357, :max-fixed-arity 2, :fn-var true, :arglists (quote ([response-format {:keys [handler]}])), :test true}, detect-response-format {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :arglists (quote ([] [opts])), :end-column 29, :end-line 253, :column 7, :line 253}, :name ajax.core/detect-response-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts]), :test true}, json-read {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :arglists ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :arglists-meta (nil nil nil nil)}, :arglists (quote ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix])), :end-column 26, :end-line 181, :column 17, :line 181}, :name ajax.core/json-read, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :arglists ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :arglists-meta (nil nil nil nil)}, :method-params ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 4, :fn-var true, :arglists ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :test true}, keyword-request-format {:protocol-inline nil, :meta {:file nil, :arglists (quote ([format format-params])), :end-column 29, :end-line 374, :column 7, :line 374}, :name ajax.core/keyword-request-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 29, :method-params ([format format-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 374, :end-line 374, :max-fixed-arity 2, :fn-var true, :arglists (quote ([format format-params])), :test true}, -js-ajax-request {:protocol-inline nil, :meta {:file nil, :arglists (quote ([this uri method body headers handler opts])), :doc "Makes an actual ajax request.  All parameters except opts\n     are in JS format.  Should return an AjaxRequest.", :protocol ajax.core/AjaxImpl, :end-column 20, :end-line 22, :column 4, :line 22}, :protocol ajax.core/AjaxImpl, :name ajax.core/-js-ajax-request, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 20, :method-params ([this uri method body headers handler opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 22, :max-fixed-arity 7, :fn-var true, :arglists (quote ([this uri method body headers handler opts])), :doc "Makes an actual ajax request.  All parameters except opts\n     are in JS format.  Should return an AjaxRequest.", :test true}, OPTIONS {:protocol-inline nil, :meta {:file nil, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists [[uri & opts]], :arglists-meta (nil)}, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :end-column 20, :end-line 445, :column 13, :line 445}, :name ajax.core/OPTIONS, :variadic true, :file "resources/public/js/out/ajax/core.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists [[uri & opts]], :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 445, :end-line 445, :max-fixed-arity 1, :fn-var true, :arglists [[uri & opts]], :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :test true}}, :require-macros {p poppea, poppea poppea, ajax.macros ajax.macros, m ajax.macros}, :cljs.analyzer/constants {:order [:with-credentials :timeout :max-retries :priority :id :read :description :content-type :write :writer :type :json :raw :reader :keywordize-keys :keywords? :prefix :else :response-format :format :status :failure :response :error :status-text :parse :original-text :parse-error :exception :aborted :headers :params :method :uri :handler :api :finally :error-handler], :seen #{:response :description :finally :format :api :original-text :keywords? :read :else :failure :method :raw :response-format :status-text :aborted :params :type :parse-error :prefix :headers :error-handler :write :priority :status :writer :id :reader :parse :content-type :max-retries :error :exception :uri :json :timeout :handler :keywordize-keys :with-credentials}}, :doc nil}